"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 4.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import json
from dotenv import load_dotenv
from google.oauth2 import service_account
from storages.backends.gcloud import GoogleCloudStorage
import requests

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# load .env variables
load_dotenv()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ["SECRET_KEY"]


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = [os.environ["DNS"], os.environ["WEB_DNS"], os.environ["LINE_DNS"], "34.173.235.152", "localhost", "127.0.0.1"]
ALLOWED_HOSTS = ["*"]

# add trusted sites
CSRF_TRUSTED_ORIGINS = ["https://" + os.environ["DNS"] + "/*", 
                        "http://" + os.environ["WEB_DNS"] + "/*",
                        "http://" + os.environ["LINE_DNS"] + "/*",
                        "https://ebf4-111-249-10-159.ngrok-free.app/*"]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "plants",
    "users",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",  # Csrf Middleware is added
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "users.middleware.LanguageMiddleware"
]



ROOT_URLCONF = "myproject.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages"
            ],
        },
    },
]

WSGI_APPLICATION = "myproject.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.mysql',
    #     'NAME': 'plants',
    #     'USER': 'root',
    #     'PASSWORD': 'test123',
    #     'HOST': '35.202.57.198',  # Or an IP Address that your DB is hosted on
    #     'PORT': '3308',  # Default MySQL port
    # },
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ["DB_NAME"],
        'USER': os.environ["DB_USER"],
        'PASSWORD': os.environ["DB_PASSWORD"],
        'HOST': os.environ["DB_HOST"],  # Or an IP Address that your DB is hosted on
        'PORT': int(os.environ["DB_PORT"])  # Default MySQL port
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

LOGIN_URL = "/plants/"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

STATIC_ROOT = ""

# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR , "plants"),
# ]

# Media files
# Base url to serve media files
MEDIA_URL = '/media/'
# Path where media is stored
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

# set auth usermodel

AUTH_USER_MODEL = "users.CustomUserModel"
AUTHENTICATION_BACKENDS = ["users.backends.CustomUserModelBackend"]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# for line api
# LINE_API_URL = "http://" + os.environ["LINE_DNS"] + ":5000/"
LINE_API_URL = "https://5b25-219-68-41-197.ngrok-free.app/"

# for yolo api
YOLO_API_URL = "http://127.0.0.1:5000/"

# for tensorflow/serving
IM_SIZE = int(os.environ["IM_SIZE"])
TF_SERVE_URL = os.environ["TF_SERVE_URL"]

# translate json 
TRANS_REPO = {}
TRANS_DICT = {}


if DEBUG:
    trans_path = f"{BASE_DIR}/plants/static/plants/json/translate.json"
    if not TRANS_REPO:
        with Path(trans_path).open("r", encoding="utf-8") as f:
            TRANS_REPO = json.load(f)
else:
    trans_url = "https://storage.googleapis.com/green01/static/plants/json/translate.json"
    res = requests.get("https://storage.googleapis.com/green01/static/plants/json/translate.json")
    TRANS_REPO = json.loads(res.content)

TRANS_DICT = {k:v[0] for k, v in TRANS_REPO.items()}

os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "myproject/wildgreen-411520-37d993c760f1.json"


# configure STORAGES for deployment
# STORAGES = {
#     "default": {
#         "BACKEND": "django.core.files.storage.FileSystemStorage",
#     },
#     "staticfiles" :{
#         "BACKEND": "storages.backends.gcloud.GoogleCloudStorage",
#         "OPTIONS": {
#             "bucket_name": "green01",
#             "location": "static",
#         }
#     },
# }

# for logging setting
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "DEBUG",
    },
}
